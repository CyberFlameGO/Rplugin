/*
 * Copyright 2000-2020 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
 */

package org.intellij.datavis.r.inlays.components.forms;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;

public class GraphicsSettingsDialogForm extends JDialog {
  @Override
  public JPanel getContentPane() {
    return contentPane;
  }

  public JCheckBox getDarkModeCheckBox() {
    return darkModeCheckBox;
  }

  public JCheckBox getAutoResizeCheckBox() {
    return autoResizeCheckBox;
  }

  public JTextField getLocalResolutionTextField() {
    return localResolutionTextField;
  }

  public JTextField getGlobalResolutionTextField() {
    return globalResolutionTextField;
  }

  private JPanel contentPane;
  private JLabel localSettingsLabel;
  private JCheckBox autoResizeCheckBox;
  private JTextField localResolutionTextField;
  private JLabel localResolutionLabel;
  private JLabel localDpiLabel;
  private JSeparator separator;
  private JTextField globalResolutionTextField;
  private JLabel globalSettingsLabel;
  private JLabel globalResolutionLabel;
  private JLabel globalDpiLabel;
  private JCheckBox darkModeCheckBox;

  public GraphicsSettingsDialogForm() {
    setContentPane(contentPane);
    setModal(true);
  }

  {
    // GUI initializer generated by IntelliJ IDEA GUI Designer
    // >>> IMPORTANT!! <<<
    // DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer
   * >>> IMPORTANT!! <<<
   * DO NOT edit this method OR call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    contentPane = new JPanel();
    contentPane.setLayout(new GridLayoutManager(1, 1, new Insets(10, 10, 10, 10), -1, -1));
    final JPanel panel1 = new JPanel();
    panel1.setLayout(new GridLayoutManager(8, 4, new Insets(0, 0, 0, 0), -1, -1));
    contentPane.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                                                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null,
                                                null, 0, false));
    localSettingsLabel = new JLabel();
    Font localSettingsLabelFont = this.$$$getFont$$$(null, Font.BOLD, -1, localSettingsLabel.getFont());
    if (localSettingsLabelFont != null) localSettingsLabel.setFont(localSettingsLabelFont);
    localSettingsLabel.setText("For current plot");
    panel1.add(localSettingsLabel,
               new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
                                   GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    final Spacer spacer1 = new Spacer();
    panel1.add(spacer1, new GridConstraints(7, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1,
                                            GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    autoResizeCheckBox = new JCheckBox();
    autoResizeCheckBox.setText("Auto resize");
    panel1.add(autoResizeCheckBox, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
                                                       GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                                       GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    localResolutionLabel = new JLabel();
    localResolutionLabel.setText("Resolution:");
    panel1.add(localResolutionLabel,
               new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
                                   GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    localResolutionTextField = new JTextField();
    localResolutionTextField.setColumns(0);
    panel1.add(localResolutionTextField, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
                                                             GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null,
                                                             new Dimension(150, -1), null, 0, false));
    localDpiLabel = new JLabel();
    localDpiLabel.setText("dpi");
    panel1.add(localDpiLabel,
               new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
                                   GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    final Spacer spacer2 = new Spacer();
    panel1.add(spacer2, new GridConstraints(0, 3, 5, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
                                            GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    separator = new JSeparator();
    panel1.add(separator, new GridConstraints(3, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                                              GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null,
                                              0, false));
    globalSettingsLabel = new JLabel();
    Font globalSettingsLabelFont = this.$$$getFont$$$(null, Font.BOLD, -1, globalSettingsLabel.getFont());
    if (globalSettingsLabelFont != null) globalSettingsLabel.setFont(globalSettingsLabelFont);
    globalSettingsLabel.setText("For all plots");
    panel1.add(globalSettingsLabel,
               new GridConstraints(4, 0, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
                                   GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    globalResolutionLabel = new JLabel();
    globalResolutionLabel.setText("Resolution:");
    panel1.add(globalResolutionLabel,
               new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
                                   GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    globalResolutionTextField = new JTextField();
    panel1.add(globalResolutionTextField, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
                                                              GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null,
                                                              new Dimension(150, -1), null, 0, false));
    globalDpiLabel = new JLabel();
    globalDpiLabel.setText("dpi");
    panel1.add(globalDpiLabel,
               new GridConstraints(5, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
                                   GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    darkModeCheckBox = new JCheckBox();
    darkModeCheckBox.setText("Adapt to dark theme");
    panel1.add(darkModeCheckBox, new GridConstraints(6, 0, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
                                                     GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                                     GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
  }

  /**
   * @noinspection ALL
   */
  private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
    if (currentFont == null) return null;
    String resultName;
    if (fontName == null) {
      resultName = currentFont.getName();
    }
    else {
      Font testFont = new Font(fontName, Font.PLAIN, 10);
      if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
        resultName = fontName;
      }
      else {
        resultName = currentFont.getName();
      }
    }
    return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() { return contentPane; }
}
