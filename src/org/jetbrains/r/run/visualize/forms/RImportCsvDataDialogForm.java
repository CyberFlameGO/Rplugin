/*
 * Copyright 2000-2020 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
 */

package org.jetbrains.r.run.visualize.forms;

import com.intellij.ui.scale.JBUIScale;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.intellij.util.ui.JBInsets;

import javax.swing.*;
import java.awt.*;
import java.util.ResourceBundle;

public class RImportCsvDataDialogForm extends JDialog {
  private JPanel contentPane;
  private JPanel optionPanel;
  private JPanel centerPanel;
  private JPanel topPanel;
  private JPanel fileInputFieldPanel;
  private JTextField nameTextField;
  private JCheckBox firstRowAsNamesCheckBox;
  private JCheckBox viewAfterImportCheckBox;
  private JCheckBox myTrimSpacesCheckBox;
  private JComboBox delimiterComboBox;
  private JComboBox quotesComboBox;
  private JComboBox escapeComboBox;
  private JComboBox commentComboBox;
  private JComboBox naComboBox;
  private JPanel okCancelButtonsPanel;
  private JTextField skipTextField;
  private JTextField headTextField;
  private JPanel previewPanel;
  private JPanel openFileLinkPanel;
  private JLabel noDataLabel;

  @Override
  public JPanel getContentPane() {
    return contentPane;
  }

  public JPanel getOptionPanel() {
    return optionPanel;
  }

  public JPanel getCenterPanel() {
    return centerPanel;
  }

  public JPanel getTopPanel() {
    return topPanel;
  }

  public JPanel getFileInputFieldPanel() {
    return fileInputFieldPanel;
  }

  public JTextField getNameTextField() {
    return nameTextField;
  }

  public JCheckBox getFirstRowAsNamesCheckBox() {
    return firstRowAsNamesCheckBox;
  }

  public JCheckBox getViewAfterImportCheckBox() {
    return viewAfterImportCheckBox;
  }

  public JCheckBox getTrimSpacesCheckBox() {
    return myTrimSpacesCheckBox;
  }

  public JComboBox getDelimiterComboBox() {
    return delimiterComboBox;
  }

  public JComboBox getQuotesComboBox() {
    return quotesComboBox;
  }

  public JComboBox getEscapeComboBox() {
    return escapeComboBox;
  }

  public JComboBox getCommentComboBox() {
    return commentComboBox;
  }

  public JComboBox getNaComboBox() {
    return naComboBox;
  }

  public JPanel getOkCancelButtonsPanel() {
    return okCancelButtonsPanel;
  }

  public JTextField getSkipTextField() {
    return skipTextField;
  }

  public JTextField getHeadTextField() {
    return headTextField;
  }

  public JPanel getPreviewPanel() {
    return previewPanel;
  }

  public JPanel getOpenFileLinkPanel() {
    return openFileLinkPanel;
  }

  public JLabel getNoDataLabel() {
    return noDataLabel;
  }

  public RImportCsvDataDialogForm() {
    setContentPane(contentPane);
    setModal(true);
  }

  {
    // GUI initializer generated by IntelliJ IDEA GUI Designer
    // >>> IMPORTANT!! <<<
    // DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer
   * >>> IMPORTANT!! <<<
   * DO NOT edit this method OR call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    contentPane = new JPanel();
    contentPane.setLayout(new GridLayoutManager(1, 1, new JBInsets(10, 10, 10, 10), -1, -1));
    final JPanel panel1 = new JPanel();
    panel1.setLayout(new GridLayoutManager(3, 1, new JBInsets(0, 0, 0, 0), -1, -1));
    contentPane.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                                                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null,
                                                null, 0, false));
    topPanel = new JPanel();
    topPanel.setLayout(new GridLayoutManager(1, 2, new JBInsets(0, 0, 8, 0), -1, -1));
    panel1.add(topPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL,
                                             GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                             GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    final JLabel label1 = new JLabel();
    this.$$$loadLabelText$$$(label1, ResourceBundle.getBundle("messages/RBundle").getString("import.data.dialog.form.from"));
    topPanel.add(label1,
                 new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
                                     GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    fileInputFieldPanel = new JPanel();
    fileInputFieldPanel.setLayout(new BorderLayout(0, 0));
    topPanel.add(fileInputFieldPanel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                                                          GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                                          GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null,
                                                          null, null, 0, false));
    centerPanel = new JPanel();
    centerPanel.setLayout(new BorderLayout(0, 0));
    panel1.add(centerPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                                                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null,
                                                null, 0, false));
    optionPanel = new JPanel();
    optionPanel.setLayout(new GridLayoutManager(14, 2, new JBInsets(0, 8, 0, 0), -1, -1));
    centerPanel.add(optionPanel, BorderLayout.EAST);
    final JLabel label2 = new JLabel();
    this.$$$loadLabelText$$$(label2, ResourceBundle.getBundle("messages/RBundle").getString("import.data.dialog.form.name"));
    optionPanel.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
                                                GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,
                                                false));
    final Spacer spacer1 = new Spacer();
    optionPanel.add(spacer1, new GridConstraints(13, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1,
                                                 GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    nameTextField = new JTextField();
    optionPanel.add(nameTextField, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
                                                       GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null,
                                                       new Dimension(150, -1), null, 0, false));
    firstRowAsNamesCheckBox = new JCheckBox();
    firstRowAsNamesCheckBox.setSelected(true);
    this.$$$loadButtonText$$$(firstRowAsNamesCheckBox,
                              ResourceBundle.getBundle("messages/RBundle").getString("import.data.dialog.form.column.names"));
    optionPanel.add(firstRowAsNamesCheckBox, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
                                                                 GridConstraints.SIZEPOLICY_CAN_SHRINK |
                                                                 GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED,
                                                                 null, null, null, 0, false));
    myTrimSpacesCheckBox = new JCheckBox();
    myTrimSpacesCheckBox.setSelected(true);
    this.$$$loadButtonText$$$(myTrimSpacesCheckBox,
                              ResourceBundle.getBundle("messages/RBundle").getString("import.data.dialog.form.trim.spaces"));
    optionPanel.add(myTrimSpacesCheckBox, new GridConstraints(4, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
                                                              GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                                              GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    final JLabel label3 = new JLabel();
    this.$$$loadLabelText$$$(label3, ResourceBundle.getBundle("messages/RBundle").getString("import.data.dialog.form.delimiter"));
    optionPanel.add(label3, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
                                                GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,
                                                false));
    delimiterComboBox = new JComboBox();
    optionPanel.add(delimiterComboBox, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
                                                           GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null,
                                                           null, null, 0, false));
    final JLabel label4 = new JLabel();
    this.$$$loadLabelText$$$(label4, ResourceBundle.getBundle("messages/RBundle").getString("import.data.dialog.form.quotes"));
    optionPanel.add(label4, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
                                                GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,
                                                false));
    quotesComboBox = new JComboBox();
    optionPanel.add(quotesComboBox, new GridConstraints(6, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
                                                        GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null,
                                                        null, 0, false));
    final JLabel label5 = new JLabel();
    this.$$$loadLabelText$$$(label5, ResourceBundle.getBundle("messages/RBundle").getString("import.data.dialog.form.escape"));
    optionPanel.add(label5, new GridConstraints(7, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
                                                GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,
                                                false));
    escapeComboBox = new JComboBox();
    optionPanel.add(escapeComboBox, new GridConstraints(7, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
                                                        GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null,
                                                        null, 0, false));
    final JLabel label6 = new JLabel();
    this.$$$loadLabelText$$$(label6, ResourceBundle.getBundle("messages/RBundle").getString("import.data.dialog.form.comment"));
    optionPanel.add(label6, new GridConstraints(8, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
                                                GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,
                                                false));
    commentComboBox = new JComboBox();
    optionPanel.add(commentComboBox, new GridConstraints(8, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
                                                         GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null,
                                                         null, 0, false));
    final JLabel label7 = new JLabel();
    this.$$$loadLabelText$$$(label7, ResourceBundle.getBundle("messages/RBundle").getString("import.data.dialog.form.na"));
    optionPanel.add(label7, new GridConstraints(9, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
                                                GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,
                                                false));
    naComboBox = new JComboBox();
    optionPanel.add(naComboBox, new GridConstraints(9, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
                                                    GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null,
                                                    0, false));
    final JLabel label8 = new JLabel();
    this.$$$loadLabelText$$$(label8, ResourceBundle.getBundle("messages/RBundle").getString("import.data.dialog.form.skip"));
    optionPanel.add(label8, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
                                                GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,
                                                false));
    skipTextField = new JTextField();
    skipTextField.setText("0");
    optionPanel.add(skipTextField, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
                                                       GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null,
                                                       new Dimension(150, -1), null, 0, false));
    final JLabel label9 = new JLabel();
    Font label9Font = this.$$$getFont$$$(null, Font.BOLD, -1, label9.getFont());
    if (label9Font != null) label9.setFont(label9Font);
    this.$$$loadLabelText$$$(label9, ResourceBundle.getBundle("messages/RBundle").getString("import.data.dialog.form.import.options"));
    optionPanel.add(label9, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
                                                GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,
                                                false));
    final JLabel label10 = new JLabel();
    Font label10Font = this.$$$getFont$$$(null, Font.BOLD, -1, label10.getFont());
    if (label10Font != null) label10.setFont(label10Font);
    this.$$$loadLabelText$$$(label10, ResourceBundle.getBundle("messages/RBundle").getString("import.data.dialog.form.preview.options"));
    optionPanel.add(label10, new GridConstraints(11, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
                                                 GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,
                                                 false));
    final JLabel label11 = new JLabel();
    this.$$$loadLabelText$$$(label11, ResourceBundle.getBundle("messages/RBundle").getString("import.data.dialog.form.head"));
    optionPanel.add(label11, new GridConstraints(12, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
                                                 GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,
                                                 false));
    headTextField = new JTextField();
    optionPanel.add(headTextField, new GridConstraints(12, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
                                                       GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null,
                                                       new Dimension(150, -1), null, 0, false));
    final JSeparator separator1 = new JSeparator();
    optionPanel.add(separator1, new GridConstraints(10, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                                                    GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null,
                                                    null, 0, false));
    previewPanel = new JPanel();
    previewPanel.setLayout(new GridLayoutManager(4, 1, new JBInsets(0, 0, 0, 8), -1, -1));
    centerPanel.add(previewPanel, BorderLayout.CENTER);
    final Spacer spacer2 = new Spacer();
    previewPanel.add(spacer2, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1,
                                                  GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    openFileLinkPanel = new JPanel();
    openFileLinkPanel.setLayout(new BorderLayout(0, 0));
    previewPanel.add(openFileLinkPanel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL,
                                                            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                                            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                                            null, null, null, 0, false));
    final Spacer spacer3 = new Spacer();
    previewPanel.add(spacer3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1,
                                                  GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    noDataLabel = new JLabel();
    this
      .$$$loadLabelText$$$(noDataLabel, ResourceBundle.getBundle("messages/RBundle").getString("import.data.dialog.preview.no.data.here"));
    previewPanel.add(noDataLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE,
                                                      GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null,
                                                      0, false));
    final JPanel panel2 = new JPanel();
    panel2.setLayout(new GridLayoutManager(1, 4, new JBInsets(8, 0, 0, 0), -1, -1));
    panel1.add(panel2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                                           GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                           GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0,
                                           false));
    final Spacer spacer4 = new Spacer();
    panel2.add(spacer4, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
                                            GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    viewAfterImportCheckBox = new JCheckBox();
    viewAfterImportCheckBox.setSelected(true);
    this.$$$loadButtonText$$$(viewAfterImportCheckBox,
                              ResourceBundle.getBundle("messages/RBundle").getString("import.data.dialog.form.view.after.import"));
    panel2.add(viewAfterImportCheckBox, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
                                                            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                                            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    okCancelButtonsPanel = new JPanel();
    okCancelButtonsPanel.setLayout(new BorderLayout(0, 0));
    panel2.add(okCancelButtonsPanel, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                                                         GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                                                         GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null,
                                                         null, null, 0, false));
    final Spacer spacer5 = new Spacer();
    panel2.add(spacer5,
               new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED,
                                   1, null, new Dimension(JBUIScale.scale(20), -1), null, 0, false));
  }

  /**
   * @noinspection ALL
   */
  private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
    if (currentFont == null) return null;
    String resultName;
    if (fontName == null) {
      resultName = currentFont.getName();
    }
    else {
      Font testFont = new Font(fontName, Font.PLAIN, 10);
      if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
        resultName = fontName;
      }
      else {
        resultName = currentFont.getName();
      }
    }
    return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
  }

  /**
   * @noinspection ALL
   */
  private void $$$loadLabelText$$$(JLabel component, String text) {
    StringBuffer result = new StringBuffer();
    boolean haveMnemonic = false;
    char mnemonic = '\0';
    int mnemonicIndex = -1;
    for (int i = 0; i < text.length(); i++) {
      if (text.charAt(i) == '&') {
        i++;
        if (i == text.length()) break;
        if (!haveMnemonic && text.charAt(i) != '&') {
          haveMnemonic = true;
          mnemonic = text.charAt(i);
          mnemonicIndex = result.length();
        }
      }
      result.append(text.charAt(i));
    }
    component.setText(result.toString());
    if (haveMnemonic) {
      component.setDisplayedMnemonic(mnemonic);
      component.setDisplayedMnemonicIndex(mnemonicIndex);
    }
  }

  /**
   * @noinspection ALL
   */
  private void $$$loadButtonText$$$(AbstractButton component, String text) {
    StringBuffer result = new StringBuffer();
    boolean haveMnemonic = false;
    char mnemonic = '\0';
    int mnemonicIndex = -1;
    for (int i = 0; i < text.length(); i++) {
      if (text.charAt(i) == '&') {
        i++;
        if (i == text.length()) break;
        if (!haveMnemonic && text.charAt(i) != '&') {
          haveMnemonic = true;
          mnemonic = text.charAt(i);
          mnemonicIndex = result.length();
        }
      }
      result.append(text.charAt(i));
    }
    component.setText(result.toString());
    if (haveMnemonic) {
      component.setMnemonic(mnemonic);
      component.setDisplayedMnemonicIndex(mnemonicIndex);
    }
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() { return contentPane; }
}
