/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

/* It's an automatically generated code. Do not modify it. */
/* Use 'ant' command in src/org/jetbrains/r/lexer directory to regenerate the lexer */
package org.jetbrains.r.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import java.util.Stack;
import org.jetbrains.r.parsing.RElementTypes;
import org.jetbrains.r.parsing.RParserDefinition;

import static org.jetbrains.r.parsing.RElementTypes.*;
import static org.jetbrains.r.parsing.RParserDefinition.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>./R.flex</tt>
 */
class _RLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int RAW_STRING_STATE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\10\1\25\1\111\1\1\1\13\22\0\1\10\1\76\1\24\1\11\1\100\1\62\1\65\1"+
    "\12\1\37\1\101\1\70\1\20\1\106\1\67\1\3\1\71\1\5\11\14\1\63\1\107\1\73\1\75"+
    "\1\74\1\110\1\64\1\33\3\15\1\31\1\32\2\2\1\41\2\2\1\34\1\2\1\40\1\2\1\21\1"+
    "\2\1\27\1\35\1\26\1\30\2\2\1\16\2\2\1\104\1\7\1\105\1\72\1\4\1\6\1\44\1\60"+
    "\1\47\1\15\1\17\1\43\1\46\1\54\1\23\1\2\1\61\1\22\1\51\1\42\1\50\1\52\1\2"+
    "\1\36\1\55\1\45\1\57\1\2\1\56\1\53\2\2\1\102\1\66\1\103\1\77\6\0\1\111\242"+
    "\0\2\111\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\2\3\1\4\1\1\1\2\1\5"+
    "\1\6\1\4\1\3\1\7\1\3\1\6\3\3\1\10"+
    "\6\3\1\1\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\2\37\1\4\2\0\1\40\1\41\1\0\1\3\3\0"+
    "\1\5\1\42\1\0\1\43\1\3\1\44\1\45\1\0"+
    "\3\3\1\0\1\3\1\46\7\3\1\0\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\0\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\2\4\1\0\4\3"+
    "\1\65\2\3\1\66\1\67\1\3\1\70\3\3\1\71"+
    "\1\72\1\73\1\0\1\74\1\75\2\3\1\76\3\3"+
    "\1\77\3\3\1\0\1\100\6\3\1\101\1\102\1\103"+
    "\13\3\1\104\2\3\1\105\6\3\1\106\1\107\2\3"+
    "\1\110";

  private static int [] zzUnpackAction() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\224\0\224\0\336\0\u0128\0\u0172\0\u01bc"+
    "\0\u0206\0\u0250\0\u029a\0\u02e4\0\u032e\0\224\0\u0378\0\u03c2"+
    "\0\u040c\0\u0456\0\u04a0\0\224\0\u04ea\0\u0534\0\u057e\0\u05c8"+
    "\0\u0612\0\u065c\0\u06a6\0\u06f0\0\224\0\u073a\0\u0784\0\u07ce"+
    "\0\u0818\0\224\0\224\0\u0862\0\u08ac\0\u08f6\0\u0940\0\224"+
    "\0\224\0\224\0\224\0\224\0\u098a\0\u09d4\0\224\0\224"+
    "\0\224\0\224\0\u0a1e\0\u0a68\0\u0ab2\0\u0afc\0\224\0\224"+
    "\0\u01bc\0\224\0\u0b46\0\u0206\0\u0b90\0\u0bda\0\u0c24\0\u0c6e"+
    "\0\224\0\u0cb8\0\336\0\336\0\u0d02\0\u0d4c\0\u0d96\0\u0de0"+
    "\0\u0e2a\0\u0e74\0\u0ebe\0\u0f08\0\u0f52\0\u0f9c\0\u0fe6\0\u1030"+
    "\0\u107a\0\u10c4\0\u06a6\0\224\0\u110e\0\224\0\224\0\224"+
    "\0\u1158\0\224\0\u11a2\0\224\0\224\0\224\0\224\0\224"+
    "\0\224\0\224\0\u11ec\0\u1236\0\u1280\0\u12ca\0\u1314\0\u135e"+
    "\0\u13a8\0\224\0\u13f2\0\u143c\0\336\0\336\0\u1486\0\336"+
    "\0\u14d0\0\u151a\0\u1564\0\224\0\224\0\224\0\u15ae\0\336"+
    "\0\336\0\u15f8\0\u1642\0\336\0\u168c\0\u16d6\0\u1720\0\336"+
    "\0\u176a\0\u17b4\0\u17fe\0\u1848\0\336\0\u1892\0\u18dc\0\u1926"+
    "\0\u1970\0\u19ba\0\u1a04\0\336\0\336\0\336\0\u1a4e\0\u1a98"+
    "\0\u1ae2\0\u1b2c\0\u1b76\0\u1bc0\0\u1c0a\0\u1c54\0\u1c9e\0\u1ce8"+
    "\0\u1d32\0\336\0\u1d7c\0\u1dc6\0\336\0\u1e10\0\u1e5a\0\u1ea4"+
    "\0\u1eee\0\u1f38\0\u1f82\0\336\0\336\0\u1fcc\0\u2016\0\336";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\3\1\7\1\10\1\3"+
    "\1\11\1\12\1\13\1\0\1\14\2\5\1\15\1\16"+
    "\2\5\1\17\1\20\1\4\1\21\3\5\1\22\3\5"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\12\5\1\31"+
    "\1\5\1\32\1\5\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\0\101\62\1\63\10\62\114\0\4\5"+
    "\6\0\4\5\1\0\3\5\2\0\11\5\1\0\22\5"+
    "\32\0\3\5\1\64\6\0\1\64\3\5\1\0\3\5"+
    "\2\0\11\5\1\0\22\5\33\0\1\64\1\0\1\14"+
    "\6\0\1\14\1\0\1\65\1\66\2\0\1\67\1\70"+
    "\5\0\1\66\2\0\1\67\16\0\1\65\36\0\6\71"+
    "\1\72\1\73\102\71\10\0\1\74\1\75\100\0\1\76"+
    "\1\0\10\76\1\77\1\0\11\76\1\0\64\76\7\13"+
    "\1\100\2\13\1\101\77\13\3\0\1\64\1\0\1\14"+
    "\6\0\1\14\2\0\1\66\2\0\1\67\1\70\5\0"+
    "\1\66\2\0\1\67\57\0\4\5\6\0\4\5\1\0"+
    "\1\5\1\102\1\5\2\0\11\5\1\0\22\5\32\0"+
    "\4\5\6\0\4\5\1\0\3\5\2\0\11\5\1\0"+
    "\2\5\1\103\1\104\16\5\30\0\7\20\1\105\14\20"+
    "\1\101\65\20\2\0\4\5\6\0\4\5\1\0\3\5"+
    "\2\0\1\5\1\106\7\5\1\0\22\5\32\0\4\5"+
    "\6\0\4\5\1\0\3\5\2\0\5\5\1\107\3\5"+
    "\1\0\22\5\32\0\4\5\6\0\3\5\1\110\1\0"+
    "\3\5\1\111\1\0\11\5\1\0\22\5\32\0\4\5"+
    "\6\0\4\5\1\0\3\5\2\0\2\5\1\112\2\5"+
    "\1\113\3\5\1\0\4\5\1\114\15\5\32\0\4\5"+
    "\6\0\4\5\1\0\3\5\2\0\11\5\1\0\2\5"+
    "\1\115\17\5\32\0\4\5\6\0\3\5\1\116\1\0"+
    "\3\5\2\0\11\5\1\0\22\5\32\0\4\5\6\0"+
    "\4\5\1\0\3\5\2\0\11\5\1\0\10\5\1\117"+
    "\6\5\1\120\2\5\32\0\4\5\6\0\4\5\1\0"+
    "\3\5\2\0\11\5\1\0\14\5\1\121\5\5\32\0"+
    "\4\5\6\0\4\5\1\0\3\5\2\0\10\5\1\122"+
    "\1\0\22\5\30\0\62\123\1\124\27\123\63\0\1\125"+
    "\11\0\1\126\101\0\1\127\112\0\1\130\117\0\1\131"+
    "\105\0\1\43\110\0\1\132\3\0\1\133\1\0\1\134"+
    "\111\0\1\135\111\0\1\136\111\0\1\137\120\0\1\140"+
    "\112\0\1\141\30\0\1\142\72\0\1\64\6\0\1\64"+
    "\2\0\1\66\2\0\1\67\1\70\5\0\1\66\2\0"+
    "\1\67\62\0\1\143\6\0\2\143\1\0\1\143\11\0"+
    "\3\143\7\0\2\143\2\0\1\143\10\0\1\143\36\0"+
    "\1\144\6\0\1\144\3\0\1\145\46\0\1\145\22\0"+
    "\112\71\12\0\1\77\77\0\1\76\1\0\11\76\1\0"+
    "\11\76\1\0\64\76\1\77\1\0\11\77\1\74\11\77"+
    "\1\74\64\77\112\13\2\0\4\5\6\0\4\5\1\0"+
    "\3\5\2\0\11\5\1\0\15\5\1\146\4\5\30\0"+
    "\112\20\2\0\4\5\6\0\4\5\1\0\3\5\2\0"+
    "\2\5\1\147\6\5\1\0\22\5\32\0\4\5\6\0"+
    "\4\5\1\0\3\5\2\0\6\5\1\150\2\5\1\0"+
    "\22\5\32\0\4\5\6\0\4\5\1\0\3\5\2\0"+
    "\11\5\1\0\12\5\1\151\7\5\67\0\1\152\54\0"+
    "\4\5\6\0\4\5\1\0\3\5\2\0\6\5\1\153"+
    "\2\5\1\0\22\5\32\0\2\5\1\154\1\5\6\0"+
    "\4\5\1\0\3\5\2\0\11\5\1\0\22\5\32\0"+
    "\4\5\6\0\4\5\1\0\3\5\2\0\11\5\1\0"+
    "\1\155\21\5\32\0\4\5\6\0\4\5\1\0\3\5"+
    "\2\0\11\5\1\0\3\5\1\156\16\5\32\0\4\5"+
    "\6\0\4\5\1\0\3\5\2\0\11\5\1\0\13\5"+
    "\1\157\6\5\32\0\4\5\6\0\4\5\1\0\3\5"+
    "\2\0\10\5\1\160\1\0\22\5\32\0\4\5\6\0"+
    "\4\5\1\0\3\5\2\0\11\5\1\0\2\5\1\161"+
    "\17\5\32\0\4\5\6\0\4\5\1\0\2\5\1\162"+
    "\2\0\11\5\1\0\22\5\32\0\4\5\6\0\3\5"+
    "\1\163\1\0\3\5\2\0\11\5\1\0\22\5\113\0"+
    "\1\164\122\0\1\165\104\0\1\166\25\0\1\167\1\0"+
    "\1\143\6\0\2\143\1\0\1\143\1\0\1\66\1\67"+
    "\6\0\3\143\1\67\6\0\2\143\2\0\1\143\2\0"+
    "\1\66\5\0\1\143\36\0\1\144\6\0\1\144\5\0"+
    "\1\67\1\70\10\0\1\67\62\0\1\144\6\0\1\144"+
    "\77\0\4\5\6\0\3\5\1\170\1\0\3\5\2\0"+
    "\11\5\1\0\22\5\32\0\4\5\6\0\4\5\1\0"+
    "\3\5\2\0\3\5\1\171\5\5\1\0\22\5\32\0"+
    "\4\5\6\0\4\5\1\0\3\5\2\0\7\5\1\172"+
    "\1\5\1\0\22\5\32\0\4\5\6\0\3\5\1\173"+
    "\1\0\3\5\2\0\11\5\1\0\22\5\32\0\4\5"+
    "\6\0\4\5\1\0\3\5\2\0\6\5\1\174\2\5"+
    "\1\0\22\5\32\0\4\5\6\0\4\5\1\0\2\5"+
    "\1\175\2\0\10\5\1\176\1\0\7\5\1\177\12\5"+
    "\32\0\4\5\6\0\4\5\1\0\3\5\2\0\11\5"+
    "\1\0\5\5\1\200\14\5\32\0\4\5\6\0\4\5"+
    "\1\0\3\5\2\0\11\5\1\0\7\5\1\201\12\5"+
    "\32\0\4\5\6\0\4\5\1\0\1\5\1\202\1\5"+
    "\2\0\11\5\1\0\22\5\32\0\4\5\6\0\4\5"+
    "\1\0\3\5\2\0\11\5\1\0\4\5\1\203\15\5"+
    "\35\0\1\204\6\0\1\204\77\0\4\5\6\0\4\5"+
    "\1\0\3\5\2\0\3\5\1\205\5\5\1\0\22\5"+
    "\32\0\4\5\6\0\4\5\1\0\3\5\2\0\11\5"+
    "\1\0\4\5\1\206\15\5\32\0\4\5\6\0\4\5"+
    "\1\0\3\5\2\0\11\5\1\0\2\5\1\207\17\5"+
    "\32\0\4\5\6\0\3\5\1\210\1\0\3\5\2\0"+
    "\11\5\1\0\22\5\32\0\4\5\6\0\4\5\1\0"+
    "\3\5\2\0\11\5\1\0\10\5\1\211\3\5\1\212"+
    "\5\5\32\0\4\5\6\0\4\5\1\0\3\5\2\0"+
    "\11\5\1\0\5\5\1\213\14\5\32\0\4\5\6\0"+
    "\3\5\1\214\1\0\3\5\2\0\11\5\1\0\22\5"+
    "\32\0\4\5\6\0\4\5\1\0\3\5\2\0\11\5"+
    "\1\0\21\5\1\215\35\0\1\204\6\0\1\204\4\0"+
    "\1\66\30\0\1\66\41\0\4\5\6\0\4\5\1\0"+
    "\3\5\2\0\11\5\1\0\5\5\1\216\14\5\32\0"+
    "\4\5\6\0\4\5\1\0\3\5\2\0\11\5\1\0"+
    "\5\5\1\217\14\5\32\0\4\5\6\0\4\5\1\0"+
    "\3\5\2\0\11\5\1\0\4\5\1\220\15\5\32\0"+
    "\4\5\6\0\4\5\1\0\3\5\2\0\11\5\1\0"+
    "\11\5\1\221\10\5\32\0\4\5\6\0\4\5\1\0"+
    "\3\5\2\0\11\5\1\0\4\5\1\222\15\5\32\0"+
    "\4\5\6\0\4\5\1\0\2\5\1\223\2\0\11\5"+
    "\1\0\22\5\32\0\4\5\6\0\3\5\1\224\1\0"+
    "\3\5\2\0\11\5\1\0\22\5\32\0\4\5\6\0"+
    "\4\5\1\0\1\5\1\225\1\5\2\0\11\5\1\0"+
    "\22\5\32\0\4\5\6\0\4\5\1\0\3\5\2\0"+
    "\11\5\1\0\12\5\1\226\7\5\32\0\4\5\6\0"+
    "\4\5\1\0\3\5\2\0\10\5\1\227\1\0\22\5"+
    "\32\0\4\5\6\0\4\5\1\0\3\5\2\0\11\5"+
    "\1\0\10\5\1\230\11\5\32\0\4\5\6\0\4\5"+
    "\1\0\3\5\2\0\11\5\1\0\6\5\1\231\13\5"+
    "\32\0\2\5\1\232\1\5\6\0\4\5\1\0\3\5"+
    "\2\0\11\5\1\0\22\5\32\0\4\5\6\0\4\5"+
    "\1\0\1\5\1\233\1\5\2\0\11\5\1\0\22\5"+
    "\32\0\4\5\6\0\4\5\1\0\3\5\2\0\11\5"+
    "\1\0\4\5\1\234\15\5\32\0\4\5\6\0\4\5"+
    "\1\0\3\5\2\0\11\5\1\0\2\5\1\235\17\5"+
    "\32\0\4\5\6\0\3\5\1\236\1\0\3\5\2\0"+
    "\11\5\1\0\22\5\32\0\4\5\6\0\3\5\1\237"+
    "\1\0\3\5\2\0\11\5\1\0\22\5\32\0\4\5"+
    "\6\0\4\5\1\0\3\5\2\0\11\5\1\0\7\5"+
    "\1\240\12\5\32\0\4\5\6\0\4\5\1\0\3\5"+
    "\2\0\10\5\1\241\1\0\22\5\32\0\4\5\6\0"+
    "\4\5\1\0\3\5\2\0\11\5\1\0\13\5\1\242"+
    "\6\5\32\0\4\5\6\0\4\5\1\0\3\5\2\0"+
    "\11\5\1\0\5\5\1\243\14\5\32\0\2\5\1\244"+
    "\1\5\6\0\4\5\1\0\3\5\2\0\11\5\1\0"+
    "\22\5\32\0\2\5\1\245\1\5\6\0\4\5\1\0"+
    "\3\5\2\0\11\5\1\0\22\5\32\0\4\5\6\0"+
    "\3\5\1\246\1\0\3\5\2\0\11\5\1\0\22\5"+
    "\32\0\4\5\6\0\4\5\1\0\3\5\2\0\10\5"+
    "\1\247\1\0\22\5\32\0\2\5\1\250\1\5\6\0"+
    "\4\5\1\0\3\5\2\0\11\5\1\0\22\5\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8288];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\11\1\1\11\5\1\1\11\10\1\1\11"+
    "\4\1\2\11\4\1\5\11\2\1\4\11\2\1\2\0"+
    "\2\11\1\0\1\11\3\0\2\1\1\0\1\11\3\1"+
    "\1\0\3\1\1\0\11\1\1\0\1\11\1\1\3\11"+
    "\1\1\1\11\1\0\7\11\2\1\1\0\4\1\1\11"+
    "\11\1\3\11\1\0\14\1\1\0\44\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
private Stack<IElementType> myExpectedBracketsStack = new Stack<>();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _RLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case RAW_STRING_STATE: {
              yybegin(YYINITIAL); return R_INVALID_STRING;
            }  // fall though
            case 169: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 73: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 74: break;
          case 3: 
            { return R_IDENTIFIER;
            } 
            // fall through
          case 75: break;
          case 4: 
            { return R_NUMERIC;
            } 
            // fall through
          case 76: break;
          case 5: 
            { return END_OF_LINE_COMMENT;
            } 
            // fall through
          case 77: break;
          case 6: 
            { return R_INVALID_STRING;
            } 
            // fall through
          case 78: break;
          case 7: 
            { return R_PLUS;
            } 
            // fall through
          case 79: break;
          case 8: 
            { return R_LPAR;
            } 
            // fall through
          case 80: break;
          case 9: 
            { return R_COLON;
            } 
            // fall through
          case 81: break;
          case 10: 
            { return R_AT;
            } 
            // fall through
          case 82: break;
          case 11: 
            { return R_AND;
            } 
            // fall through
          case 83: break;
          case 12: 
            { return R_OR;
            } 
            // fall through
          case 84: break;
          case 13: 
            { return R_MINUS;
            } 
            // fall through
          case 85: break;
          case 14: 
            { return R_MULT;
            } 
            // fall through
          case 86: break;
          case 15: 
            { return R_DIV;
            } 
            // fall through
          case 87: break;
          case 16: 
            { return R_EXP;
            } 
            // fall through
          case 88: break;
          case 17: 
            { return R_LT;
            } 
            // fall through
          case 89: break;
          case 18: 
            { return R_GT;
            } 
            // fall through
          case 90: break;
          case 19: 
            { return R_EQ;
            } 
            // fall through
          case 91: break;
          case 20: 
            { return R_NOT;
            } 
            // fall through
          case 92: break;
          case 21: 
            { return R_TILDE;
            } 
            // fall through
          case 93: break;
          case 22: 
            { return R_LIST_SUBSET;
            } 
            // fall through
          case 94: break;
          case 23: 
            { return R_RPAR;
            } 
            // fall through
          case 95: break;
          case 24: 
            { return R_LBRACE;
            } 
            // fall through
          case 96: break;
          case 25: 
            { return R_RBRACE;
            } 
            // fall through
          case 97: break;
          case 26: 
            { myExpectedBracketsStack.add(R_RBRACKET); return R_LBRACKET;
            } 
            // fall through
          case 98: break;
          case 27: 
            { if (myExpectedBracketsStack.isEmpty()) return R_RBRACKET;
                              myExpectedBracketsStack.pop();
                              return R_RBRACKET;
            } 
            // fall through
          case 99: break;
          case 28: 
            { return R_COMMA;
            } 
            // fall through
          case 100: break;
          case 29: 
            { return R_SEMI;
            } 
            // fall through
          case 101: break;
          case 30: 
            { return R_HELP;
            } 
            // fall through
          case 102: break;
          case 31: 
            { 
            } 
            // fall through
          case 103: break;
          case 32: 
            { return R_INTEGER;
            } 
            // fall through
          case 104: break;
          case 33: 
            { return R_COMPLEX;
            } 
            // fall through
          case 105: break;
          case 34: 
            { return ROXYGEN_COMMENT;
            } 
            // fall through
          case 106: break;
          case 35: 
            { return R_STRING;
            } 
            // fall through
          case 107: break;
          case 36: 
            { return R_IN;
            } 
            // fall through
          case 108: break;
          case 37: 
            { return R_IF;
            } 
            // fall through
          case 109: break;
          case 38: 
            { return R_NA;
            } 
            // fall through
          case 110: break;
          case 39: 
            { return R_INFIX_OP;
            } 
            // fall through
          case 111: break;
          case 40: 
            { return R_DOUBLECOLON;
            } 
            // fall through
          case 112: break;
          case 41: 
            { return R_LEFT_ASSIGN_OLD;
            } 
            // fall through
          case 113: break;
          case 42: 
            { return R_ANDAND;
            } 
            // fall through
          case 114: break;
          case 43: 
            { return R_OROR;
            } 
            // fall through
          case 115: break;
          case 44: 
            { return R_RIGHT_ASSIGN;
            } 
            // fall through
          case 116: break;
          case 45: 
            { return R_LEFT_ASSIGN;
            } 
            // fall through
          case 117: break;
          case 46: 
            { return R_LE;
            } 
            // fall through
          case 118: break;
          case 47: 
            { return R_GE;
            } 
            // fall through
          case 119: break;
          case 48: 
            { return R_EQEQ;
            } 
            // fall through
          case 120: break;
          case 49: 
            { return R_NOTEQ;
            } 
            // fall through
          case 121: break;
          case 50: 
            { myExpectedBracketsStack.add(R_RDBRACKET); return R_LDBRACKET;
            } 
            // fall through
          case 122: break;
          case 51: 
            { if (myExpectedBracketsStack.isEmpty()) return R_RDBRACKET;
                              final IElementType expectedBracket = myExpectedBracketsStack.pop();
                              if (expectedBracket == R_RDBRACKET) {
                                return R_RDBRACKET;
                              }
                              else {
                                yypushback(1);
                                return R_RBRACKET;
                              }
            } 
            // fall through
          case 123: break;
          case 52: 
            { yybegin(YYINITIAL); return R_STRING;
            } 
            // fall through
          case 124: break;
          case 53: 
            { yybegin(RAW_STRING_STATE);
            } 
            // fall through
          case 125: break;
          case 54: 
            { return R_NAN;
            } 
            // fall through
          case 126: break;
          case 55: 
            { return R_INF;
            } 
            // fall through
          case 127: break;
          case 56: 
            { return R_FOR;
            } 
            // fall through
          case 128: break;
          case 57: 
            { return R_TRIPLECOLON;
            } 
            // fall through
          case 129: break;
          case 58: 
            { return R_RIGHT_COMPLEX_ASSIGN;
            } 
            // fall through
          case 130: break;
          case 59: 
            { return R_LEFT_COMPLEX_ASSIGN;
            } 
            // fall through
          case 131: break;
          case 60: 
            { return R_ELSE;
            } 
            // fall through
          case 132: break;
          case 61: 
            { return R_TRUE;
            } 
            // fall through
          case 133: break;
          case 62: 
            { return R_NULL;
            } 
            // fall through
          case 134: break;
          case 63: 
            { return R_NEXT;
            } 
            // fall through
          case 135: break;
          case 64: 
            { return R_FALSE;
            } 
            // fall through
          case 136: break;
          case 65: 
            { return R_WHILE;
            } 
            // fall through
          case 137: break;
          case 66: 
            { return R_BREAK;
            } 
            // fall through
          case 138: break;
          case 67: 
            { return R_REPEAT;
            } 
            // fall through
          case 139: break;
          case 68: 
            { return R_NA_REAL_;
            } 
            // fall through
          case 140: break;
          case 69: 
            { return R_FUNCTION;
            } 
            // fall through
          case 141: break;
          case 70: 
            { return R_NA_INTEGER_;
            } 
            // fall through
          case 142: break;
          case 71: 
            { return R_NA_COMPLEX_;
            } 
            // fall through
          case 143: break;
          case 72: 
            { return R_NA_CHARACTER_;
            } 
            // fall through
          case 144: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
